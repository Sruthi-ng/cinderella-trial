# .github/workflows/python-ci.yml

# Descriptive name for the workflow
name: Python CI Pipeline

# Triggers: Run on push/pull request to the main branch, and allow manual runs
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering from the Actions tab

# Define the jobs to run
jobs:
  build-and-test:
    # Job name displayed on GitHub
    name: Build and Test on Python ${{ matrix.python-version }} / ${{ matrix.os }}
    # Runner environment: Use a matrix strategy to test on different OS and Python versions
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Don't cancel all jobs if one fails
      matrix:
        os: [ubuntu-latest] # Start with ubuntu-latest; add windows-latest, macos-latest if needed
        python-version: ["3.9", "3.10", "3.11", "3.12"] # Specify desired Python versions

    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4 # Uses the latest checkout action

      # 2. Set up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Cache dependencies for faster builds
      # Caches based on OS, Python version, and the requirements file hash
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # Standard pip cache location
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          # If you have separate dev requirements (for linting/testing tools):
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Ensure your requirements.txt (and potentially requirements-dev.txt)
        # include linters (flake8, black, isort, mypy) and testing tools (pytest, pytest-cov)

      # 5. Lint code (Example using Flake8 and Black)
      # Adjust commands based on your chosen linters
      - name: Lint with Flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        # Make sure flake8 is in your requirements-dev.txt or install here: pip install flake8

      - name: Check formatting with Black
        run: |
          black --check .
        # Make sure black is in your requirements-dev.txt or install here: pip install black

      # (Optional) Add other linters like isort (import sorting) or mypy (static typing) here

      # 6. Run tests (Example using Pytest with coverage)
      - name: Run tests with Pytest
        run: |
          # Replace './src' with the path to your source code if it's not in the root
          # The COV_FAIL_UNDER=80 flag will fail the build if coverage is below 80%
          pytest --cov=./ --cov-report=xml --cov-report=term --cov-fail-under=80
        # Make sure pytest and pytest-cov are in your requirements-dev.txt or install here

      # 7. (Optional) Upload code coverage report
      # Option A: Upload as an artifact (viewable in the workflow run summary)
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml # Path to the coverage file generated by pytest-cov

      # Option B: Use a service like Codecov (requires setup and secrets)
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }} # Add CODECOV_TOKEN to your repository secrets
      #     files: coverage.xml
      #     fail_ci_if_error: true

